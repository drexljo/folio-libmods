#!/bin/bash

# call_tower
# Takes care of signing on and off with okapi.
# Requires either 'signon' or 'signoff' as parameters

# The following environment variables have to be set:
# HOST (optional, for systems behind NATs)
# JSON_FILE
# MODULE
# OKAPI_HOST
# OKAPI_PORT
# PORT


# ================================= Copyright =================================
# Version 0.0.1 (2020-07-13), Copyright (C) 2020
# Author: Jo Drexl (johannes.drexl@lrz.de) for FOLIO
# Coauthors: -

#   This file is part of the LRZ FOLIO debian package

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#   On Debian systems, the full text of the Apache License version 2.0
#   can be found in the file 
#     `/usr/share/common-licenses/Apache-2.0'


# ================================= Variables =================================

# Tenantfile
CT_TENANTFILE="/etc/folio/$MODULE/tenants"


# ================================= Functions =================================

# Deregister module from Okapi
ct_bye() {
  # Returns 0 on success
  # Returns 1 on failure
  
  # Local variables
  local RETURN
  
  # Delete module instance from Okapi
  if ! RETURN=$(curl -D - -s -w '\n' -X DELETE http://$OKAPI_HOST:$OKAPI_PORT/_/deployment/modules/$CT_MODULE_ID/$HOST-$PORT)
    then
      echo "FATAL: Could not deregister module '$CT_MODULE_ID' from Okapi!"
      return 1
  fi
  # Interpret return message
  if echo -e "$RETURN" | grep "HTTP/1.1 204 No Content" > /dev/null 2>&1
    then
      echo "INFO: Module deregistered from Okapi."
      return 0
    else
      echo -e "WARN: Okapi answered with unknown message:\n$RETURN"
      return 1
  fi
}

# Register module to Okapi
ct_hello() {
  # Returns 0 on success
  # Returns 1 on failure
  
  # Local variables
  local RETURN
  
  # Register module itself
  if ! RETURN=$(curl -D - -s -w '\n' -X POST -H "Content-type: application/json" \
    -d @"$CT_TMPJSON_HELLO" http://$OKAPI_HOST:$OKAPI_PORT/_/deployment/modules)
    then
      echo "FATAL: Could not register module '$CT_MODULE_ID' to Okapi!"
      return 1
  fi
  # Interpret return message
  if echo -e "$RETURN" | grep "HTTP/1.1 201 Created" > /dev/null 2>&1
    then
      echo "INFO: Module registered with Okapi."
      return 0
    else
      echo -e "ERROR: Okapi answered with unknown message:\n$RETURN"
      return 1
  fi
}

# Create JSON to register module to Okapi
ct_jsonhello() {
  # Returns 0 on success
  # Returns 1 on failure
  
  cat > "$CT_TMPJSON_HELLO" <<END
{
  "url": "http://$HOST:$PORT",
  "srvcId": "$CT_MODULE_ID"
}
END

  # Check if that worked out
  if [ "$?" = "0" ]
    then
      return 0
    else
      return 1
  fi
}

# Create JSON to bind module to tenants
ct_jsontenant() {
  # Returns 0 on success
  # Returns 1 on failure
  
  cat > "$CT_TMPJSON_TENANTS" <<END
{
  "id": "$CT_MODULE_ID"
}
END

  # Check if that worked out
  if [ "$?" = "0" ]
    then
      return 0
    else
      return 1
  fi
}

# Bind module to tenant
ct_liftoff() {
  # Expects tenant as parameter 1
  # Returns 0 on success
  # Returns 1 on failure
  
  # Local variables
  local TENANT="$1"
  
  # Check variable
  if [ "$TENANT" = "" ]
    then
      # Can not do anything here
      echo "ERROR: No tenant provided to ct_touchdown!"
      return 1
  fi
  
  # Register module for tenant
  if ! RETURN=$(curl -D - -s -w '\n' -X POST -H "Content-type: application/json" \
    -d @"$CT_TMPJSON_TENANTS" http://$OKAPI_HOST:$OKAPI_PORT/_/proxy/tenants/$TENANT/modules)
    then
      echo "ERROR: Could not bind module '$CT_MODULE_ID' to tenant '$TENANT'!"
      return 1
  fi
  
  # Interpret return message
  if echo -e "$RETURN" | grep "HTTP/1.1 201 Created" > /dev/null 2>&1
    then
      echo "INFO: Module bound to tenant '$TENANT'."
      return 0
    else
      echo -e "WARN: Okapi answered with unknown message:\n$RETURN"
      return 1
  fi
}

# Tenant handling
ct_runway() {
  # Expects action as parameter 1
  # Returns 0 on success
  # Returns 1 on failure
  
  # Local variables
  local ACTION="$1"
  local ERRORS="0"
  local FUNCTION
  local TENANT

  # Select function for action
  case "$ACTION" in
    liftoff)
      FUNCTION="ct_liftoff"
      ;;
    touchdown)
      FUNCTION="ct_touchdown"
      ;;
    *)
      echo "FATAL: Could not recognize action for ct_runway!"
      return 1
      ;;
  esac
  
  # Read tenants file
  while read TENANT
    do
      # Ignore lines with comments or spaces
      if echo "$LINE" | grep -E "^(\s+)?(#.*)?$" > /dev/null 2>&1
        then
          continue
      fi
      
      # Execute function for the read tenant
      if ! $FUNCTION "$TENANT"
        then
          # Just count
          ERRORS="$(( $ERRORS + 1 ))"
      fi
    done < "$CT_TENANTFILE"
  
  # Errors on touchdown are critical
  if [ "$ACTION" = "touchdown" -a "$ERRORS" != "0" ]
    then
      echo "CRITICAL: Errors occured while deregistrating modules! Check Okapi!"
      return 1
  fi
  
  # Jump back
  return 0
}

# Unbind module from tenant
ct_touchdown() {
  # Expects tenant as parameter 1
  # Returns 0 on success
  # Returns 1 on failure

  # Local variables
  local TENANT="$1"
  
  # Check variable
  if [ "$TENANT" = "" ]
    then
      # Can not do anything here
      echo "ERROR: No tenant provided to ct_touchdown!"
      return 1
  fi
  
  # Deregister module for tenant
  if ! RETURN=$(curl -D - -s -w '\n' -X DELETE http://$OKAPI_HOST:$OKAPI_PORT/_/proxy/tenants/$TENANT/modules/$CT_MODULE_ID)
    then
      echo "ERROR: Could not unbind module '$CT_MODULE_ID' from tenant '$TENANT'!"
      return 1
  fi
  
  # Interpret return message
  if echo -e "$RETURN" | grep "HTTP/1.1 204 No Content" > /dev/null 2>&1
    then
      echo "INFO: Module unbound from tenant '$TENANT'."
      return 0
    else
      echo -e "WARN: Okapi answered with unknown message:\n$RETURN"
      return 1
  fi
}


# =============================== Prerequisites ===============================

# Fetch parameter
if [ "$1" = "signoff" -o "$1" = "signon" ]
  then
    CT_ACTION="$1"
  else
    echo "FATAL: Unrecognized action!"
    exit 1
fi

# Check for variables to be set
if [ "$HOST" = "" ]
  then
    HOST=$(hostname --fqdn)
fi
if [ "$JSON_FILE" = "" ]
  then
    echo "FATAL: No JSON file specified!"
    exit 1
fi
if [ "$MODULE" = "" ]
  then
    echo "FATAL: No MODULE specified!"
    exit 1
fi
if [ "$OKAPI_HOST" = "" ]
  then
    echo "FATAL: No OKAPI_HOST specified!"
    exit 1
fi
if [ "$OKAPI_PORT" = "" ]
  then
    echo "FATAL: No OKAPI_PORT specified!"
    exit 1
fi
if [ "$PORT" = "" ]
  then
    echo "FATAL: No PORT specified!"
    exit 1
fi

# Check for the JSON file
if [ ! -f "$JSON_FILE" ]
  then
    echo "FATAL: JSON file missing!"
    exit 1
fi

# Check for the tenants file
if [ ! -f "$CT_TENANTFILE" ]
  then
    echo "FATAL: Tenants config file missing ($CT_TENANTFILE)!"
    exit 1
fi

# Read the module id (mod_xy-$VERSION)
CT_MODULE_ID=$(grep -Em 1 "\"id\":" "$JSON_FILE" | cut -d '"' -f 4 -s)
# Check if it's invalid
if ! echo "$CT_MODULE_ID" | grep -E "^[-a-z]+[\.0-9]+$" > /dev/null
  then
    echo "FATAL: Detected module ID was '$CT_MODULE_ID', can't work with that!"
    exit 1
fi
# Check if the module name fits the JSON
if [ "$CT_MODULE" != "$(echo "$CT_MODULE_ID" | grep -oE "[-a-z]+[a-z]")" ]
  then
    echo "FATAL: Module variable contains '$CT_MODULE', but JSON is for '$(echo "$CT_MODULE_ID" | grep -oE "[-a-z]+[a-z]")'."
    exit 1
fi
# Get interface name
CT_INTERFACE=$(grep -Em 1 -A 3 "\"provides\":" "$JSON_FILE" | grep -Em 1 "\"id\":" | cut -d '"' -f 4 -s)
# Check if it's invalid
if ! echo "$CT_INTERFACE" | grep -E "^[-a-z]+[\.0-9]+$" > /dev/null
  then
    echo "FATAL: Detected interface was '$CT_INTERFACE', can't work with that!"
    exit 1
fi

# Set temp files for communication
CT_TMPJSON_HELLO="/tmp/$CT_MODULE-$PORT-hello.json"
CT_TMPJSON_TENANTS="/tmp/$CT_MODULE-$PORT-tenants.json"


# =================================== Main ====================================

# Work through actions to be done
case "$CT_ACTION" in
  signoff)
    # Call okapi to disable module for all tenants
    if ! ct_runway touchdown
      then
        # Even with errors the show must go on, but we quit with error in
        # the end nonetheless!
        CT_ERRORS="1"
    fi
    # Call okapi to disable module
    if ! ct_bye
      then
        # Messaging has already been taken care of
        CT_ERRORS="1"
    fi
    # Quit on error, if necessary
    if [ "$CT_ERRORS" = "1" ]
      then
        exit 1
    fi
    ;;
  signon)
    # Create JSON files
    if ! ct_jsonhello && ct_jsontenant
      then
        echo "FATAL: Could not create deployment JSON files!"
        exit 1
    fi
    # Call okapi to enable module
    if ! ct_hello
      then
        # Messaging has already been taken care of
        exit 1
    fi
    # Call okapi to enable module for all tenants
    if ! ct_runway liftoff
      then
        # Messaging has already been taken care of
        exit 1
    fi
    
    # Remove temp files
    rm -f "$CT_TMPJSON_HELLO"
    rm -f "$CT_TMPJSON_TENANTS"
    ;;
  *)
    # Should not happen
    echo "FATAL: Unrecognized action!"
    ;;
esac

exit 0
